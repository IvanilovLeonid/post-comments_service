package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"errors"
	"social-comments/api/graphql/generated"
	"social-comments/internal/core/domain"
	"strconv"
)

// Replies is the resolver for the replies field.
func (r *commentResolver) Replies(ctx context.Context, obj *domain.Comment, first *int, after *string) ([]*domain.Comment, error) {
	replies, err := r.CommentService.GetCommentReplies(ctx, obj.ID)
	if err != nil {
		return nil, r.wrapGQLError(err)
	}
	return replies, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input domain.CreateCommentInput) (*domain.Comment, error) {
	// Конвертируем PostID из string в int
	postID, err := strconv.Atoi(input.PostID)
	if err != nil {
		return nil, r.wrapGQLError(errors.New("invalid post ID format"))
	}

	// Обрабатываем ParentID (может быть nil)
	var parentID *int
	if input.ParentID != nil {
		pid, err := strconv.Atoi(*input.ParentID)
		if err != nil {
			return nil, r.wrapGQLError(errors.New("invalid parent comment ID format"))
		}
		parentID = &pid
	}

	req := domain.CreateCommentRequest{
		Author:   input.Author,
		Text:     input.Text,
		PostID:   postID,   // Теперь int
		ParentID: parentID, // *int
	}

	comment, err := r.CommentService.CreateComment(ctx, req)
	if err != nil {
		return nil, r.wrapGQLError(err)
	}
	return comment, nil
}

// CommentAdded is the resolver for the commentAdded field.

// Comment returns generated.CommentResolver implementation.
func (r *Resolver) Comment() generated.CommentResolver { return &commentResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
